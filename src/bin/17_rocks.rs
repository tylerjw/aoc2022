use std::collections::HashMap;

const HI: [u8; 4] = [0b00111100, 0b00000000, 0b00000000, 0b00000000];
const X: [u8; 4] = [0b00010000, 0b00111000, 0b00010000, 0b00000000];
const L: [u8; 4] = [0b00111000, 0b00001000, 0b00001000, 0b00000000];
const I: [u8; 4] = [0b00100000, 0b00100000, 0b00100000, 0b00100000];
const S: [u8; 4] = [0b00110000, 0b00110000, 0b00000000, 0b00000000];
const ROCK_PATTERNS: [[u8; 4]; 5] = [HI, X, L, I, S];

#[allow(dead_code)]
const INPUT_TEST: &str = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
#[allow(dead_code)]
const INPUT: &str = ">>><>><<>>><<<>>>><<>><<><<><<<<>>>><<<<>>>><<<<>>>><<<<>><<<<>>><<<<>>><><<<>>><><>>>><>><<<<><<>><>>><<<>>>><<<>>><<<><>>><<<>>><>>><<>>>><>>>><<>>>><<<>><<<<>>><<<<>>>><<><<><<<>>><<>>><<>>><<>><<<<>>>><<>><<<>><>>><>>><<>><<<<>>>><<>><<<<>>><<<<>>>><<>>>><>><>>>><<<<><<<>>><<<<>>><<<><>><>>><<<<>>><<<><><><>>>><<<<><>>>><><<<<>>>><<<><<<>>>><<<>>>><<>>>><<<>><<<<>>>><<>>>><<><<<<><<<<>><<<<>>><<<<><<<><<<>>><>>><<>><>>>><<<<>>>><<<<>>><<>>>><<<<><<<>>>><<<>>><<<<>>><<>>>><<<>>><>><<>><<>>>><<<<>>><><<<<>>><<>>><<<>><>>><>><<<>><>>><<>>><<><>>>><<<>><<<>><<<>>><<<>><<>><<<<>>><<<><>>><><>><<<<>><<<>><<<>>><<<><<><<<>><<>>>><>>><>><<<>>>><<<<><<<><<<>>>><<<>>>><<<>>>><<<>>>><>><>>><<<<>>><<<>>><<<>>><<>>>><<<<>><<<>><<<><<<>>><<>><<>><<<<>>><>>>><<<>>><<<<>>><>>>><<>>><<>><<><>>><<>><<>><>>><<<<><<>>><<<<><>>><<<<>>>><<<>><<>><<><<<>>>><<<<>><>><<<<><<<<><<<<>><>>><<>>>><<>><<<<>>><<>>><>>><<<><<<>>><>>><>><<<><<>><<><>><>><<<<>>>><<>><<>>><<<<>>><<>><<>><<<<>><<>><>><<>>><>>>><<>><<<><<<<>><<>>><>><>>><<<<>>><<>>>><<<>>>><<>>><<<<>>><<>>>><>><<<<><<<<>>><<<>><<><<<>>><>><<<>><>><<>><<>>><><<<<>>>><><<<<>><<<>>><<>>><<<<><<<>><<><>>>><>><<<><<<><<>><<>>><<<>>>><<<>><<>>>><<>>><<>>>><<<<>>><<<<>><<<<>><<<<>><<<>>>><<>><<>><<>>>><><<<>>>><>>>><<<<><<<<>><<><<<>><<<><><<<<><<<<>><<>><<<<>>>><<<<>>>><>>>><<><<<<><<>>>><>>>><<<<>>>><<<<><<<><>>>><<<>><<<>><<>>><<<>>><>>><<>>>><<><<<>>><<>>>><<>>><>><<>>><<<<><<<<>>><<<<>>>><<<<><<<>>><<>>>><<>><>>><<>>>><<<><<<<>>>><<<>><<<<>><<<<>>>><<<<>>>><<<<>>><>><><<<<>>>><<<>><<>>>><<<>>><>>>><<<>>><<><<><<><<<>>>><>><<<>><<>>>><<<><<><<><<<<><<<>>>><<<<>>><>>><<<<>>><>><<<<>>>><<<<><<<<>>>><<<>><>>>><<<<>>><<>><<<>><<<<><>>><<<<>>>><<>><<><>><<<>><>>><>>><<>>><<>>>><<><<<<>>><<>>>><<<<>>>><<<>><>>><<<>><<<<>>>><<<<>>>><<><<<>><<<>>>><><<<><<>><<<><<<<>>><<>>><<<<>><<>>><<<>>><<>>>><<>>><<<>>>><>><<<<>>><<<>>><<<><<<><<><<>><<<<>>><<<<>>>><><<>>><<<>>><<<>><<<>>><>>><>>>><<>><<<>>><<<>>><><>>><<<<>>><<>><>><<<<>>><>>><<<<>><<<<>><>>>><<>>>><<>>>><>>><<>><>>>><<>>>><<<<>><<>>>><><<<>>><<<><><<>>><<>><<<>>>><<>><<><<>><<<><<><<<>>>><<>>>><<<<>>>><<<<><<<<><<<><<>>>><<<<>><<<>>>><<<<>><<>>>><<<<>>><<><<>><<<>>>><<<>>><<<>>><<<<>><>><>>>><<<<>>><>>>><<>><<<<>>><>>><<<<>><>>><>>><>>>><>>><<<<><>><><<>><>><<<<><>>><>>><<><<>><<<>>><<<<>>><<<<>>><<<><<<><<<>>><<<><<<<>>><<<<>>><<<<>>>><>>>><<<<>>><<>>>><<<<>>><<<<>><<<<>>><<<<>>><<>><>>>><<<>>><<<>>><<<<>>><<<><>>><<>>>><<<<>>>><<<<>>>><<<>><<<>>>><<>>>><<<><>>><>><>><>>>><<<<>>><>>>><>>><>>><<>><<<<>><<<>>>><<<>>><<>>><<>><<<<>>>><<>>>><><>><<<>>><<<<><<<<><<<<><<<<>>>><<>>><<>>><<<<>><<>>>><<<<><<>>><<>>><<><<><<>>>><<>>><<<<>>><<<><<<<>>>><>><<<<>>>><><>>><>>>><>>>><<<>><<<>>>><<<<>><<><<<<>><<><<<>>>><<<>><<<<>><>>>><<>>>><<<>>>><<<>><<<<>><<><>>><<<<>>>><><><<>><<>>>><<>><<<><>>>><<><<<<><<>>>><<>>><<<>>><>><<>><<<>><<<<>><<>><>><<<<>>>><<<<>>><<>><<<>>>><<<<><<<>><<<<>>>><<<<>><><<<<>><<<<><<>><<<><>>>><><<>>><><<<<><><<<>>><<<<>><><<>><<<<><>>>><>>><<>>>><<>>><>><<<>>>><<>>>><<>>><>>><<>>>><<<<>>>><<>>><<<><<<>>><>>>><<<<>>><<>><<<>><<<<>>><<<>>><>>><<><<<><><<>>>><<<>>><<>><>>>><<<<>><<>><<<>><<<<><<<<>>>><<><<<<><<>><<<>>>><<>><<<<>>>><><>>>><<<<>>>><<<<>>><<<>>>><<<<>>>><<>>><<<<><<>>>><<<<><<<<><<<><>><><<<><<>>>><>>>><><><<<>>>><<>><<<>>><<<>>><<<<><<<>><<<<>>><<<<>>><<>>>><<><>><<<<>>>><<<<>>><<<<><<<<>>><<<<><<<>>>><>><<>>>><<<<>>>><<>>><<<>><<<<>><<<<>><>><<<<>>><<<<><<<<>>><><><>>>><<<>>><>>>><<>>>><>>><<<<>><<<><<<<>>>><<<>>><>><<<>>>><>><<<>>><>>>><<>>>><>>><<<>>><<>>>><<><<>><<<<>><>>><<<<>>>><<<>>><<<><<<><<<>>><<<>><<<>><<>><<<><>>>><<<<>>><><<<>><>>>><<>>><><<<>>><<<<>>><<<<>><<<>><<<><<<>><<<>>><<<>>>><<>><>>>><<>><<>>>><<<>>><<<<><>>>><<><<<>><<>><<<<>>>><<<<><<>>><<<>>><<>><<>>><<<<><>>>><<><<<<>>><>>>><<<><<<<>>><<>><>><<<<>><<<<><<<><>>><<<><<>><<<<>><<><<>><<<>>><<<<>>><<>>><>>>><<<><>>>><><<<>>>><><<<<>><<<<>>><<>>>><<<<>><<<<>><<<>>><<><>><<<<>>>><>>>><<>>><<>>><<<>>><<<<>><><>>>><<<<>><<>>><<<><<<<>><<>>>><<<>>>><<><><<>>>><>>><>>>><>>><<<<>><><>>><>><<>><<><<<<><<>>>><<>><>>><<>>><<><<<<>>>><<<>>>><<<<>>>><<<><<><<<>><<<<>><>><<<<>>>><<>>>><<<<><<>><>><<<<>>>><>><<><<>><<<>>><<<>><<<<>><>>>><<>>><<<<>>>><<>><<<>><<<>><<>><<<>><>>><<<<>>>><<<<>>>><<>>>><<<<><><<<><<<><<>>>><>><<>>><<<<>><<<<>>>><<<>>>><>>>><<<<>>>><<>>>><>><<>>>><<><<<>><<<>><<<>><<<>>>><<>>><<><<<><<<<>><<<<>>><<<<>>><<>><<<<>><<>><<>>><><<<>><<>>>><<>>>><<<>>>><><<>>>><>>>><><<<<>>><<<>>><<<><><<<>><<<>>><<<>><<<<>><><<<<>>><<>><<>>>><<>><>>>><<>><<>>>><<<>>><<<>><<<<><><>><<<<>><<>><<<<>>>><<<<>><<><<>>>><><<<<>>>><<<>>>><><<<<>>><<>>><<><<>>><<>><<<<><<<><<>>>><<<<>><<<><<>><<<<><><<><>>>><><<<><<<>><>>><>>><<>>>><<<<><>><<<<><<<<>>><<<>>><<<<>><>>>><>><><<<>><<<>>><<<<>>><><<<<>>>><<<>>>><>>>><<<>>>><>>><<>>><<<<>>><<<<>>><<>><>>><<<<>><<>>>><<>><<<><>>><>>><<><<<>><<<>>>><>>>><<<<>>><<>><<><<<><<<<>>><>>><<>>><<><>>>><<<<>>>><<><<<<>>><<>><>>><<<>>>><<<<><<<>>><<<><<<<>>><<><<<><<>><<>>>><<>><<<<><<<<>>><<>><<<<>>><<><><>>><<>><>>><<>><<<<><><>><>><>>><<>>>><<<<>>>><<><<<<>><<<<>>>><>><>><<><<<<>>>><>><<<>>>><<<<><<>><>>><<<<>>>><><<>>><<<<>>>><<<>>><<<<>>>><<<<>>><<<<><<<<>>><<<>><<>>>><<<><<<<>>><>><<<<>><>>>><<<>><<>>><<><<<<>><<<<><><<<<>>><>>><>>><<<>>><>>>><<<>>>><<<>>>><<<>><<<>>><<>><<>>><<<><<>>><>>><<>>><<<<><<<>>>><<<<>>>><>><<<>>><<<<>><<><<<<>>>><<<>><<>>><>>><<>>><><<><<<<>><<<<>>>><<<><><>>>><<<><<<>><<<>>><>>>><><<>><<<>><<<<>><><>>><<<<>>><<<<>>>><<>>><<>>><>>>><><<<<>>>><<><<>>><><><<<<>><<<><>>><<>>>><>><<>>><<><<>>><<>><<<<><<<<>><>><<<><<><>><<>><>>>><<<><<<>>>><<<><<<>>><<>><>>><<<<>>>><<<>><<<<>>><<<<><<<<><<>>><<><<<<>>><<<<>><<<<><<<<>>><<<<>><<>>>><<<>>>><>>>><<<>>><<<<>>>><<><<<><<<>>>><<>>><<>><>>><<>>>><<<<>><<<>><<<><<<<>>>><>>>><<<<>><<<>>>><>>>><<<<>>>><><<<>><<<>><<>>><<>>><<<>>><<<><<<<>>>><<<><>><<><<<>>><<<><>>>><<<<>>>><<<>>>><><<<>>><<>><<<<>>>><<<>>><<<<><<>>><<<<>>><<<<><<>>>><<>><>>><<<>>><<<>>><>><<<<>><><<<<>><<>>><<<>>>><>>>><><<<><<<>><<<<>><>><<<><>>><<<>>>><<<>>>><<<<><<<>>>><>>><>>><>><<<><<<<>>><<><<<><<<<>><<<<>>><<>><><<>>><<>>><>>><<><<>><<<<><<<>>>><>>><<><<<<><<<<>><<<<>><<<<>>><<>>><>>><<>><<<<>>><<>>>><><<<>>>><<<<><<<<>>><<<<><<>><>>><<<>>><<<>>><><<<>><<<>>>><<<><><<>><<<>>>><>><<<<>>><<>><<><<<<>>><<>>><<<<><<>>><<<<><>>>><<<>>>><<<<>>>><<><<<<>><>>><<<<><<<><<<>>><<<>>><<<>>>><>>>><<<>>>><>><><<<>><<<>><><<<>><>>><<>>>><<<>>>><<<<>>>><<><<<<>><<<><>>><<>>><<><<<><>><<><<<>>>><<<<><<<<><<<>>>><<<<><<>><>><<>>>><<<<>><<>>>><<>>><<>>><<<<>><<><>><<<>><>>><>><>><<>>>><<>><<<<><<<<>>>><<>>>><<<<>>><<>><>>><>>>><<><>>>><<>>>><<<<>><<>>>><<<<>><<>>><>><<<<><><<>><<<<>>><<<>><<<<>>>><>>><<<><<><>>><>>><>>>><<>>>><<<>>><<>>>><<><<<>>><<<<>><<<>>>><>><><<>><<<<>><>>><<><<>>><<<>><<<>>><<<<>><<<>>><<>>><<>><>>><<<<>><<<>>><>><<<>>><<<>>>><<<><<<>><<>><<<<>>><<>>>><><<>>><>><<<>><>>><<>>>><<<<><<>>>><<<<>>>><<<<>>>><>>>><>>><<<>>>><<<>>>><><<>>>><<<>><<<<><<<>>><>><<<><<<<>><<<>>><<<>><<<<><<<>>><>><<<<>>><<>>><<<<>>><<>>>><<<<>><<>>>><<>>><<<>><<<>>><><<<<>>><<<>>>><>><<<<>>><<<>>>><<<>>>><<<>>>><>><><<<<><<<<>>><>><>>>><>>>><<<<>>><>><<<>><<>><<>>>><>>><>>><>><<<<>>>><<><>>>><>><<<<><>>>><<<<>>><<<><<<><<>>>><<<<>><<>><<<<>>>><<<>>><<<>><>><<<<>><><<>>><<>>>><<<<>>>><<<>>><>>><<<>>><<<>>>><<<>><<>>>><<<><>>><<<>>>><><>><<><<<>>>><<<<><<<>>><<<<>>><<<<>>><<><<>>>><<<<>>>><<<>>>><<<>>>><>><<<<>>><<<>>>><<<<>>><<<>>><<>><<>>>><<<<>>>><>>>><<<>>>><<<>>>><<>><>>><<>>>><<>>><<>>>><<<<>><>>><<<>>>><<<>>>><<>><<<<>><<>>>><<><<>>>><>>><<<<><<<>>><<<<>>><<<<>>><>>>><>>>><<<>><<>>><>>><<<<>>><<<<>><<<>><<<<>>><>>><<<<>><<<<><<<><<<<>>>><<<<>><><<<<>><<<<><<<>>><<><<<<>>>><<>>>><>><>>>><<<>><<>>>><<<><>>>><<>>><<><<<<>>>><<<<><>><<><<><<>>>><<<<>>><<<>>><<>><<<<>><<>>><<<<>>><>>><<<>><<<<><<>>>><>>><<<<>><<<>>>><<<><<><>>><><<<<>>>><<<<>>><<<<>>>><<<><<>><<<<><<<<>>>><<<<><>>><<<<>><>>>><<>>>><>>><<<<>>>><<<><<><<<><<<<>>>><<<<>>><><<><<<>>>><<<>><<<>><<<<>>>><<<<><<<><<<<>>><>>><<>>><<<<><>>>><<<><>>><<<>><<>>><<><<>><>><<<>>>><<>><<<><><<<>>>><<>><<>>>><<<<>><<>><<><<<<>><<<>>><<><>>>><><<<<>>><<<>><<<<>>><>><<>>>><<><<>>>><<<<><<><><<>>><>>><<<<>><>><<>>><>><<>>><><>>><<>><<>>>><>><<<<><<<>>><<<>>><>><<<>>>><>><<<><<<<>>>><>>>><<>><<<>>><<<<>><<<>>><<>>><<>>>><<<><<>>>><<<>><<<<><<><>><<><<<>><>><<<>><<<>>>><<<>>>><<<<>>>><<<<><<>>><<<>>>><<<<>>>><<>>>><>>>><>><<<<>>><<<>><<<>>><<<>>>><<>><>><<<>>>><<><><>>><<<<>>>><<<>><<<<>>>><<>><<<>>>><<>>>><<<>>>><<><<<>><>>>><<<>>><>>>><<<<>><<<>>>><<<>>><<<>>><<><<<<>>>><<<><<<><<>>><>>><<>>>><<<>>>><<>>><<<<>>>><><<>>><><>>>><><<>>>><<><>>>><<<>><<<<><>>>><>><<>><<<>><<<><<<><<<<>>>><<<>>><<>>><<<<>><<>>><<<<>>>><<<<>>>><>><<>><><<<<><<<>>><<><<>>><<<>><<<>>>><>>>><<<>>>><<>>><<<<>><<>><<<>>>><<<<>>>><<<<>><<<<>>><<>>><<>>><<>>>><>>><>>><<<<>>>><<<<>>><<><<<>>>><<<<>><<<><<<<><><<<>>>><<<>><><<<<>>>><>><<<><<>><><>>>><><<<<>>>><<<<><>><<<>><<>>><>>>><<>>><>><<<<>>>><<<<><<<<>><<<<><<<>><<>>>><<>>><<<<><>>><<<>>><<<><>>>><<<<>><<><<<>>>><>>>><<<<><<<>><<<>>>><<><>>><<<>>>><<<>>><<>><<<>>>><<<<>>>><<<<><><>>><>><>><>><<<>><<<<>>><<>><<<>><<<<>><<<>><<>>>><<<<>><>><>><<<<>>>><>>><<>>><>>>><>>>><<<>>>><<<>>><<<><><<<<><><<><<<<>>>><>>>><>>><>>>><<<>><<<<>><<<<>>><<<<>><<<>>>><>><<>>><<<<>><>>>><<<<>>><<>>>><>>><<<>>>><<>>><<<<>>><<<>><><<<<>><<<>>>><<<<><<<>><<>><><<<<><<>>>><<<<>>>><<<<><<<><><<><<>>><<>>>><>>>><<>>>><>>><<<<>>>><<<<>>><<<>>><<>><>><<><<<>>><<<>><<<>><<>><<>>><<>><>>>><<<>>><<<<>>>><<<><>>>><<>><<>><<>>>><>><<><<>>>><<>><><<>><<<>>><<<<>>>><<<<>>><<><<<<><<>>>><<<<><<>>>><<><<<<><<>><<>>>><<<>>><<<><<<>>>><<<<>><<<>><<><<>>><<<>>>><><<<<><<>>><><<>>>><<<>>><><<>>>><>><<<><>><<<>>><<>>>><<>>>><<>><>>><<<>>><<><<>><>>>><<<><<<>>><<<<><><<><<<>>><<<><><<>>><<<<>>>><<>><<<>><>>><>><<><<<>>><<><>>><<<><<>>><<<<><><<<>>>><>>>><<>>><>><<>>><<>><<<>><<>>>><><<<>>>><<<<>>><>>>><<<>>><<<>>><<<>><<>>>><<>>><><<<>><<>>><<<<>>><<><>>>><<>><<<>><>><<>>>><>>>><<><<<<><>><<<><<<><<<>>>><<<<>><>><<<<><<<<>><<<<>>><>>><<<<>><<<<>>>><<<>>><<>><<<<>>>><>>>><<<<>>>><<<<>><<<><<>>><<<<>>>><<<>><<<>>><<><<<>>><<<<><<>>>><>><<><<>>><<<>>><>>>>";

fn does_not_hit_wall(falling: &[u8; 4], pos: u8) -> bool {
    (falling[0] | falling[1] | falling[2] | falling[3]) & pos == 0
}

fn does_overlap(falling: &[u8], cave: &[u8], vertical_pos: usize) -> bool {
    (falling[0] & cave[vertical_pos]
        | falling[1] & cave[vertical_pos + 1]
        | falling[2] & cave[vertical_pos + 2]
        | falling[3] & cave[vertical_pos + 3])
        != 0
}

fn rest(falling: &[u8; 4], cave: &mut [u8], vertical_pos: usize) {
    cave[vertical_pos] |= falling[0];
    cave[vertical_pos + 1] |= falling[1];
    cave[vertical_pos + 2] |= falling[2];
    cave[vertical_pos + 3] |= falling[3];
}

fn find_new_height(height: usize, cave: &[u8]) -> usize {
    let mut i = height;
    while cave[i] != 0 {
        i += 1;
    }
    i - 1
}

#[allow(dead_code)]
fn display(stuff: &[u8], start: usize, end: usize) {
    (start..=end)
        .rev()
        .for_each(|i| println!("{:08b}", stuff[i]));
}
#[allow(dead_code)]
fn display_falling(falling: &[u8]) {
    display(falling, 0, 3);
}

fn main() {
    let input = INPUT.as_bytes();
    let mut cave = [0_u8; 200_000];
    let mut height: usize = 0;
    let mut falling = [0_u8; 4];
    let mut vertical_pos;
    let mut piece_num = 0;
    let mut jet_num = 0;
    let mut drops = 0;
    let move_falling =
        |a: &mut u8, to_the_left: bool| if to_the_left { *a <<= 1 } else { *a >>= 1 };

    let mut found_loop = false;
    let mut virtual_height = 0;
    let mut goal_drops = 1000000000000;

    let mut cycle_finder = HashMap::new();

    // spawn the first rock
    falling.copy_from_slice(&ROCK_PATTERNS[piece_num]);
    drops += 1;
    piece_num = drops % 5;
    vertical_pos = 3;

    loop {
        // jet left or right
        let (wall, to_the_left) = match input[jet_num] as char {
            '<' => (0b10000000, true),
            '>' => (0b00000010, false),
            _ => panic!("noooooooo"),
        };
        if does_not_hit_wall(&falling, wall) {
            falling
                .iter_mut()
                .for_each(|a| move_falling(a, to_the_left));
        }
        // undo side move if we now collide with existing rocks
        if does_overlap(&falling, &cave, vertical_pos) {
            falling
                .iter_mut()
                .for_each(|a| move_falling(a, !to_the_left));
        }

        // gravity (stop if at rest point)
        if vertical_pos == 0 || does_overlap(&falling, &cave, vertical_pos - 1) {
            rest(&falling, &mut cave, vertical_pos);
            height = find_new_height(height, &cave);

            // get the next piece into hte falling buffer
            falling.copy_from_slice(&ROCK_PATTERNS[piece_num]);

            // increment the number of pieces
            drops += 1;
            piece_num = drops % 5;

            // set the vertical position for this next piece
            vertical_pos = height + 4;

            if drops == 2023 {
                println!("tower at 2022 height = {}", height + 1);
            }

            if height > 10_000 && !found_loop {
                let shape = (cave[height + 1] as usize) << 24
                    | ((cave[height] as usize) << 16)
                    | ((cave[height - 1] as usize) << 8)
                    | (cave[height - 2] as usize);

                if let Some(&(prev_height, prev_drops)) =
                    cycle_finder.get(&(piece_num, jet_num, shape))
                {
                    println!("piece = {}", piece_num);
                    println!("jet = {}", jet_num);
                    println!("drops until start of loop = {}", prev_drops);
                    println!("prev height = {}", prev_height);
                    println!("height = {}", height);
                    println!("drops = {}", drops);

                    let delta_height = height - prev_height;
                    let delta_drops = drops - prev_drops;

                    println!(
                        "There is an increase of {delta_height} rows for every {delta_drops} drops"
                    );

                    let remaining_drops = 1000000000000_usize - drops + 1;
                    println!("There are still {remaining_drops} left to go");

                    let div = remaining_drops / delta_drops;
                    let mmod = remaining_drops % delta_drops;

                    println!("div = {div}, mmod = {mmod}");

                    let integral_height = height + delta_height * div;

                    println!("The height will reach {integral_height} but there are still {mmod} drops left");
                    goal_drops = drops + mmod;
                    virtual_height = delta_height * div;

                    found_loop = true;
                } else {
                    cycle_finder.insert((piece_num, jet_num, shape), (height, drops));
                }
            }

            if found_loop && drops == goal_drops {
                println!("At {goal_drops} we estimate that after 1000000000000 drops the height will be {}",
                height + virtual_height + 1);
                break;
            }
        } else {
            vertical_pos -= 1;
        }
        jet_num += 1;
        jet_num %= input.len();
    }
}
